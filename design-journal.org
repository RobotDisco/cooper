#+TITLE: Cooper Memorial Project, design journal
#+AUTHOR: Gaelan D'costa
#+EMAIL: gdcosta@gmail.com
#+LANGUAGE: en
#+STARTUP: indent align hidestars oddeven
#+PROPERTY: tangle cooper game designjournal

* Introduction
** I had a cat.
   I moved to Toronto in 2011. It wasn't something I decided on myself; my 
   partner at the time was intending on going to University here.

   Very soon after moving here, possibly in the first or second month, certainly
   not long enough for me to have been working for more than a paycheque or two,
   my partner at the time decided to "adopt" a stray cat that had apparently
   lived in our neighbourhood for a while. He had been living off discarded food
   from a nearby taxicab parking area and slept in a small shelter a neighbour
   had set up (he had cats of his own and could not safely bring this cat in.)

   At this time I was the only one of our household who was employed, and this
   went against my fiscally paranoid sensibilities. But I couldn't argue against
   rescuing an outdoor cat who showed no hostility to me, so we scooped him up
   and made him ours. We named him *Special Agent Dale Cooperr* after our
   favourite TV Show at the time.

   In time my partner and I were no longer together, but it made more sense for
   me to keep Cooper. Not that I minded; I had learned how to care for him and I
   very much needed his companionship. He was the first opportunity for me to
   provide for someone with full awarenesss and understanding, which was very
   important to me as someone who was not taught how to do so as a child and was
   conditioned, both as aa software developer and as a North American male, to
   have considered myself intrinsically incapable of doing so until I was forced
   to do so on my own.

   We shared much time together, mostly in health but for a few years at the end
   in a sicknesss from which he finally succumbed to by March 2020. In a final
   gift to me, he in some ways strengthened me for the upcoming pandemic and
   environmental and social strife we would face in this year of pandemic and
   reckoning of a deel social history of racial inequity: it was easy to move
   through displacement of lockdown and employment fears after two years of
   diagnosing, treating, and finally burying my feline child.

   I had a particular cat from 2011 until 2020; and while I am at peace with his
   ended time, I am still adjusting to it, and trying to find some way in which
   to manifest it. I am hopinng to do so while developing a small game project
   with him in mind.
** I played a game
   One of the earliest things I remember doing as a child after moving to Canada
   was gathering around my cousin's computer, popping in one of the random
   scattered shareware compendiums some parent in our extended family had gotten
   for us, and playing one of the many games that piqued my interest.

   One game I clocked a lot of time in was called [[https://en.wikipedia.org/wiki/Toppler][Perestroika]]. It was a very
   strange game. It opened with a picture of a recently-collapsed Soviet
   iconography I barely comprehended from CNN footage. The language was all
   using characters that made no sense to my latin-exclusive education.

   But the game was ultimately a simple platformer, and the few sprites included
   were very cute. Much later I would learn that there was s deliberate
   political statement driving the game, and the idea of a polemic arcade game
   would endear it to mme further as an adult.
** Synthesis and mission
   I want to write something that commemorates some expression of loss for my
   first cat. Why not try to theme an implementation of a childhood game I very
   much enjoyed?
* The Source Material
** What are Perestroika's rules?
From wikipedia:
#+BEGIN_QUOTE
The game consists of controlling a small frog-like creature which jumps from one
lily pad to another, trying to collect dots in four colours symbolizing grocery
goods, currency transactions, progressive taxes and adventures and to reach a
certain pad in the right-top corner of the screen. The lilies, symbolizing the
ever-changing laws and acts in the USSR, constantly shrink and disappear only to
appear in other places. Higher levels also feature one or more evil creatures
called "bureaucrats" which follow the frog and try to eat it. The frog dies if
the lily pad on which it is standing disappears, if the player moves it to a
place where there is no lily pad, or if it is caught by a bureaucrat.
#+END_QUOTE
** Intended cooperification
+ The protagonist will represent Cooper
+ Unsure as yet what the petals will become.
+ The coin at the end will become Fried Chicken, the food he most tried to steal
+ The "bureaucraats" will either represent me or my other cat as obstacles
+ I am yet unsure what the other point items will represent.
** Reference Implementation
I found a [[http://michal.biniek.pl/games/toppler.html][Javascript implementation]] I can look at for guidance.
* Earlier Attempts
** Lisp Game Jam
Originally I was going to do this for a Lisp game jam. The week of the jam, my
work downsized because of COVID. I was not impacted but I spent much of the week
trying to deal with the fallout and make sure the people who were were ok. By
the time I got around to noticing the Lisp game jam had started, I had only two
days left.

I originally rushed an attempt by beginning from the user interface. I spent the
weekend learning how to render a 2D environment via the [[https://github.com/oakes/play-cljc][play-cljc]] project.

It was gratifying to see shapes render on the screen in a weekend, but over the
next few weeks I wrote myself into a corner as I could not untangle my game
logic from the rendering code. In addition, I was trying to learn WebGL concepts
while also trying to piece together game logic at the same time.

At some point I had to give up because I simply could not figure out how to work
on one component without impacting or breaking other components, and the flow of
the program was incredibly difficult to navigate. 

In addition, the =play-cljc= author's template assumed an incredibly different
workflow from mine, which meant I was constantly stopping and starting the
program and I could not debug it from inside the editor. I was gaining none of
the advantages of using clojure.

The last commit of this particular attempt can be found [[https://github.com/RobotDisco/cooper/tree/7b79cba8edb6051abf8934549f0f79c5b7c514b0][here]]
** Rip it up and Start Again
I then recreated the projet from scratch after doing some small courses on data
modelling and using the Clojure REPL. This has proven to be a much nicer
environmment. I am indebted to [[https://purelyfunctional.tv][Eric Normand]] for producing some very useful
courses on these subjects.

I am trying to do most of my prototyping in the REPL, convering experiments into
tests. I was able to generate petal logic and a small amount of player logic
doing so, with test-driven development keeping my understanding of the logic
matching what the code actually implemented.

After I was comfortable with my design and tests, I would use =clojure.spec= to
add type-checking to the data and functions. I was aware this was puting the
cart before the horse but I was still learning about this technique and a lot of
the promised paradigm shifting took a bunch of time for me to absorb. I am now
starting to realize it would be nice if I had designed my functions and data
such that my tests and data could be tested by property-based testing instead of
via me constructing specific examples, although that method is still very
strange to me.

I also started learning enough about =deps.edn= to produce a nice workflow for
myself, using aliases and plugins to allow for linting and idiom-checking, for
automated testing, and for dependency management. I am indebted to the
[[https://practicalli.github.io/clojure/][practicalli clojure guide]] and their curated [[https://github.com/practicalli/clojure-deps-edn][deps.edn alias set]] for finally
showing me how to produce a good starting place for developing clojure
applications.

This was when I learned about the idea of a design journal, where one keeps
around one's REPL explorations as a way of recording how one developed the shape
of their program instead of removing them when done. I wish I had preserved my
earlier explorations for petal and player logic but I will have to recreate
them.
* Log
** 2020-06-26
Starting with the petals. They're somewhat bimodal, they have two states
effectively
+ hidden with a countdown to respawning
+ visible with a randomly selected rate

The petals so far have just one function, a advance. Here are its rules
+ if visible, shrink the petal by its shrinking rate
+ if visible but size <= 0, flip to visible and start randomly picked countdown
  length
+ if invisible, tick the countdown by one
+ if invisible but countdown = 0, flip to visible with a randomly selected
  shrinking rate

I should probably play around with some ideas now. Here are mock visible petal
which may or may not be complete.
#+BEGIN_SRC clojure :results silent
  ;; A petal can be visible, with a size that shrinks according to a rate
  (def visible-petal-mock {:size 100 :rate 10})
  ;; or a petal can be invisible, with a countdown until it becomes visible again
  (def invisible-petal-mock {:countdown 100})
#+END_SRC

Let's write a stub version of the advance-petal function.
#+BEGIN_SRC clojure :results silent
  (defn advance-petal
    "Progress the petal forward in time.

    If visible, shrink the petal by its shrinking rate. If invisible, tick the
    countdown timer by one.  If the relevan visible/hidden petals values reach a
    zero value or lower (size/countdown respectively) then flip them into the
    alternating state with randomized new starting conditions.

    Arguments:
    - petal to advance
    Return:
    - petal having moved forward in time, including flipping state."
    [petal]
    petal)
#+END_SRC

Let's write some characterization tests using our mocks.
#+BEGIN_SRC clojure :results silent
  (require '[clojure.test :refer [deftest is testing]])

  (def visible-petal-full {:size 100 :rate 10})
  (def visible-petal-empty {:size 0 :rate 10})

  (deftest visible-petal-test
    (testing "Full petal shrinks"
      (let [shrunk-petal (advance-petal visible-petal-full)]
        (is (< (:size shrunk-petal) (:size visible-petal-full)))
        (is (= (+ (:size shrunk-petal) (:rate shrunk-petal))
               (:size visible-petal-full))))))

  (visible-petal-test)
#+END_SRC

OK Let's try implementing that test in the function.
#+BEGIN_SRC clojure :results silent
  (defn advance-petal
    "Progress the petal forward in time.

    If visible, shrink the petal by its shrinking rate. If invisible, tick the
    countdown timer by one.  If the relevan visible/hidden petals values reach a
    zero value or lower (size/countdown respectively) then flip them into the
    alternating state with randomized new starting conditions.

    Arguments:
    - petal to advance
    Return:
    - petal having moved forward in time, including flipping state."
    [{:keys [size rate] :as petal}]
    (assoc petal :size (- size rate)))
#+END_SRC
** 2020-06-27
*** Unit testing petals
OK sweet let's implement all our tests now
#+BEGIN_SRC clojure :results silent
  (require '[clojure.test :refer [deftest is testing]])

  (def visible-petal-full {:size 100 :rate 10})
  (def visible-petal-empty {:size 0 :rate 10})

  (def invisible-petal-mock {:countdown 100})

    (deftest visible-petal-test
      (testing "Full petal shrinks"
        (let [shrunk-petal (advance-petal visible-petal-full)]
          (is (< (:size shrunk-petal) (:size visible-petal-full)))
          (is (= (+ (:size shrunk-petal) (:rate shrunk-petal))
                 (:size visible-petal-full)))))
      (testing "Empty petal flips"
        (let [flipped-petal (advance-petal visible-petal-empty)]
          (is (= (set (keys flipped-petal))
                 (set (keys invisible-petal-mock)))))))
#+END_SRC
OK new function definition
#+BEGIN_SRC clojure :results silent
  (defn advance-petal
    "Progress the petal forward in time.

    If visible, shrink the petal by its shrinking rate. If invisible,
    tick the countdown timer by one.  If the relevan visible/hidden
    petals values reach a zero value or lower (size/countdown
    respectively) then flip them into the alternating state with
    randomized new starting conditions.

    Arguments:
    - petal to advance
    Return:
    - petal having moved forward in time, including flipping state."
    [{:keys [size rate] :as petal}]
    (if (zero? size)
      {:countdown 100}
      (assoc petal :size (- size rate))))
#+END_SRC
OK sweet let's just implement the rest of the function
#+BEGIN_SRC clojure :results silent
  (require '[clojure.test :refer [deftest is testing]])

  (def visible-petal-full {:type :visible :size 100 :rate 10})
  (def visible-petal-empty {:type :visible :size 0 :rate 10})

  (def invisible-petal-pending {:type :hidden :countdown 100})
  (def invisible-petal-triggers {:type :hidden :countdown 0})

  ;; I have split this into a multi-method because the way that `visible` and
  ;; `hidden` petals work are very different, but I want to use them in the
  ;; same places, and I don't want to break Liskov. Also this allows me to
  ;; have two completely separate structures without needing to have two
  ;; layers of branching in the `advance` function.
  (defmulti advance-petal
      "Progress the petal forward in time.

      If visible, shrink the petal by its shrinking rate. If invisible,
    tick the countdown timer by one.  If the relevan visible/hidden
    petals values reach a zero value or lower (size/countdown
    respectively) then flip them into the alternating state with
    randomized new starting conditions.

      Arguments:
      - petal to advance
      Return:
      - petal having moved forward in time, including flipping state."
    :type)

  (defmethod advance-petal :hidden
    [{:keys [countdown] :as petal}]
    (if (zero? countdown)
      {:type :visible :size 100 :rate 10}
      (assoc petal :countdown (dec countdown))))

  (defmethod advance-petal :visible
    [{:keys [size rate] :as petal}]
    (if (zero? size)
      {:type :hidden :countdown 100}
      (assoc petal :size (- size rate))))

  (deftest visible-petal-test
    (testing "Full petal shrinks"
      (let [shrunk-petal (advance-petal visible-petal-full)]
        (is (< (:size shrunk-petal) (:size visible-petal-full)))
        (is (= (+ (:size shrunk-petal) (:rate shrunk-petal))
               (:size visible-petal-full)))))
    (testing "Empty petal flips"
      (let [flipped-petal (advance-petal visible-petal-empty)]
        (is (= (set (keys flipped-petal))
               (set (keys invisible-petal-pending)))))))

  (deftest invisible-petal-test
    (testing "Pending respawn counts down"
      (let [pending-respawn (advance-petal invisible-petal-pending)]
        (is (= (inc (:countdown pending-respawn))
               (:countdown invisible-petal-pending)))))
    (testing "Hidden petal respawns when countdown finished"
      (let [flipped-petal (advance-petal invisible-petal-triggers)]
        (is (= (set (keys flipped-petal))
               (set (keys visible-petal-full)))))))
#+END_SRC
Excellent so that worked. I think it's time to get this specc'd
*** A momentary question and deferral of random petal generation.
It seemed super important to me that I write some functionality for random
generation of rates and countdown values. It made things weird, always, but
right now my petals with their fixed respawn and shrink rates seems pretty
contrived. Shouldn't this be considered essential MVP complexity?

I am starting to think it shouldn't be. While I can make the respawn randomness
parameterizable, from a /feedback/ point of view it also makes it harder for me
to understand what is going on as I try to reason about the currently
implemented "world" of my game. I think I'm going to have to added it in as one
of the earliest -- if not *the* earliest -- release milestones, but I can
implement it later and right now that randomness only complicates my code and
makes it harder for me to test future things. Let's leave the game running as
statically as possible as I implement the player, game map, point system, and so
on. We'll add randomness in when I have more comfort in the overall stability of
the system.
*** Let's spec this sucker
A major part of switching to Clojure is that I can use [[https://clojure.org/guides/spec][clojure.spec]] to
produce runtime -- and optional! -- static checking and property-based
assertion of my code at the fuction/data definition layer.  Now that I
have my unit tests, which are in fact characterization tests, let's
add some typing to the model and also see if I can produce
generative/property-based tests that leverage this!

I'm not going to try to rehash what spec is or how it works, I think
the above document and [[https://www.youtube.com/playlist?list=PLpr9V-R8ZxiBWGAuncfBRYhZtY5-Bp75s][practicalli's video series]] does a great job, so
check those out!
#+BEGIN_SRC clojure :results silent
  (require '[clojure.test :refer [deftest is testing]])
  (require '[clojure.spec.alpha :as s])

  ;; Interesting, :: keywords don't work here for some reason. The
  ;; namespacing?  Leverage fact that sets are implicitly membership
  ;; predicates when invoked.
  (s/def :petal/type #{:petal/hidden :petal/visible})
  (s/def :petal/size (s/and int? #(>= % 0) #(<= % 100)))
  ;; spec generators don't like it when the first predicate doesn't
  ;; explicitly indicate a type, which is why just using pos? wasn't
  ;; enough.
  (s/def :petal/rate (s/and int? pos?))
  (s/def :petal/countdown (s/and int? #(>= % 0)))

  ;; Little bit of a dance here to do polymorphic specs based on field
  (defmulti petal-type :petal/type)
  (defmethod petal-type :petal/hidden [_]
    (s/keys :req [:petal/type :petal/countdown]))
  (defmethod petal-type :petal/visible [_]
    (s/keys :req [:petal/type :petal/size :petal/rate]))
  (s/def :petal/petal (s/multi-spec petal-type :petal/type))

  (def visible-petal-full
    {:petal/type :petal/visible :petal/size 100 :petal/rate 10})
  ;; Nifty way to shorthand namespaced keywords. Note it doesn't work
  ;; for values.
  (def visible-petal-empty
    #:petal{:type :petal/visible :size 0 :rate 10})

  (def invisible-petal-pending
    #:petal{:type :petal/hidden :countdown 100})
  (def invisible-petal-triggers
    #:petal{:type :petal/hidden :countdown 0})

  ;; I have split this into a multi-method because the way that
  ;; `visible` and `hidden` petals work are very different, but I want
  ;; to use them in the same places, and I don't want to break
  ;; Liskov. Also this allows me to have two completely separate
  ;; structures without needing to have two layers of branching in the
  ;; `advance` function.
  (defmulti advance-petal
    "Progress the petal forward in time.

    If visible, shrink the petal by its shrinking rate. If invisible, tick the
    countdown timer by one.  If the relevan visible/hidden petals values reach a
    zero value or lower (size/countdown respectively) then flip them into the
    alternating state with randomized new starting conditions.

    Arguments:
    - petal to advance
    Return:
    - petal having moved forward in time, including flipping state."
    :petal/type)

  ;; Happily, destructuring can handle namespaced keywords
  (defmethod advance-petal :petal/hidden
    [{:keys [petal/countdown] :as petal}]
    (if (zero? countdown)
      #:petal{:type :petal/visible :size 100 :rate 10}
      (assoc petal :petal/countdown (dec countdown))))

  (defmethod advance-petal :petal/visible
    [{:keys [petal/size petal/rate] :as petal}]
    (if (zero? size)
      #:petal{:type :petal/hidden :countdown 100}
      (assoc petal :petal/size (- size rate))))

  (deftest visible-petal-test
    (testing "Full petal shrinks"
      (let [shrunk-petal (advance-petal visible-petal-full)]
        (is (< (:petal/size shrunk-petal)
               (:petal/size visible-petal-full)))
        (is (= (+ (:petal/size shrunk-petal) (:petal/rate shrunk-petal))
               (:petal/size visible-petal-full)))))
    (testing "Empty petal flips"
      (let [flipped-petal (advance-petal visible-petal-empty)]
        (is (= (set (keys flipped-petal))
               (set (keys invisible-petal-pending)))))))

  (deftest invisible-petal-test
    (testing "Pending respawn counts down"
      (let [pending-respawn (advance-petal invisible-petal-pending)]
        (is (= (inc (:petal/countdown pending-respawn))
               (:petal/countdown invisible-petal-pending)))))
    (testing "Hidden petal respawns when countdown finished"
      (let [flipped-petal (advance-petal invisible-petal-triggers)]
        (is (= (set (keys flipped-petal))
               (set (keys visible-petal-full)))))))
#+END_SRC

So right now I've written up clojure.spec definitions of the /data./ I
can create structures as maps or evaluate the results of functions and
verify that they conform to the shape of data as I have defined it.

#+BEGIN_SRC clojure :results silent
  ;; Without this, spec asserts won't fire.
  ;; This is useful when limiting spec assert checks to dev mode
  ;; (s/check-asserts true)

  ;; The following asserts will all pass.

  ;; If conforming, print the item. If invalid, there is a special keyword
  ;; called #:clojure.spec.alpha/invalid that is returned.
  (s/conform :petal/petal
             #:petal{:type :petal/visible :size 100 :rate 10})
  ;; If conforming, print nothing. If not, spit out a message to the
  ;; REPL that breaks down exactly which portion of the item does not
  ;; conform to the provided spec.
  (s/explain :petal/petal
             #:petal{:type :petal/visible :size 100 :rate 10})
  ;; Just print out a true if the object conforms, otherwise false.
  (s/valid? :petal/petal
            #:petal{:type :petal/visible :size 100 :rate 10})
  ;; Instead of failing with message or special keyword, throw an
  ;; assert. Note that the call always returns the object, which is good
  ;; for bypassing the assert in production code, when the
  ;; aforementioned `s/check-asserts` param has not been set trrue as to
  ;; activate the assertion checking.
  (s/assert :petal/petal
            #:petal{:type :petal/visible :size 100 :rate 10})

  ;; These checks will all fail in respectively similar ways.

  (s/conform :petal/petal
             #:petal{:type :petal/visible :size 1000 :rate 10})
  (s/explain :petal/petal
             #:petal{:type :petal/visible :size 1000 :rate 10})
  (s/valid? :petal/petal
            #:petal{:type :petal/visible :size 1000 :rate 10})
  (s/assert :petal/petal
            #:petal{:type :petal/visible :size 1000 :rate 10})
#+END_SRC

Check out how I can generate random examples of my data now thanks to
having type and constraint definitions!
#+BEGIN_SRC clojure :results silent
  ;; Note that this module secrently requires test.check to be installed
  ;; via deps.edn
  (require '[clojure.spec.gen.alpha :as gen])

  ;; generate some random int
  (gen/generate (s/gen int?))

  ;; generate a random value from my set of petal tyles
  (gen/generate (s/gen :petal/type))

  ;; I can generate full petals now too! This is a good way to see the
  ;; domain of inputs I defined and verify via random generation whether
  ;; I'm truly happy with my definition; for example right now I notice
  ;; that while I capped my petal size to 100, the rate (of shrinkage
  ;; per turn) is basically unlimited which will cause typing problems
  ;; not to mention gameplay ones without further refining.
  (gen/generate (s/gen :petal/petal))

  ;; `gen/sample` allows you to generate larger amounts of example items
  ;; from your specs.
  (gen/sample (s/gen :petal/petal) 5)

  ;; `spec/exercise` prints both generated output and their conformance
  ;; breakdown. This is useful with things with more advanced
  ;; conformance breakdowns like `s/cat`, `s/alt`, `s/*` etc...
  (s/exercise :petal/petal 2)
#+END_SRC
There is a way to write custom generators if necessary but I haven't
learned how to yet.
*** function definition specs + function instrumentation
I'm growing tired of copying my content out over and over, but I think
I need to do so at least once more. So what I've done so far is allow
for specifications of data. This is stuff we can throw into functions
when we want to validate or assert the appropriate shape of
user-provided data, and I could try to integrate these into my unit
tests and function pre/post-condition maps. But spec allows us to go
further; we can define specs for functions and and macros.

The forms we use will allow us to make spec declarations on the
following:
+ The argument list
+ The return type
+ An invariant assertion relating the arguments to the return if
  necessary.

That last one is the most interesting because it is how we will enact
property-based testing on our system via `test.check`. It turns out
that we can use these data shapes to generate random conforming
values, which if we run them through our tests, means that we can run
all sorts of random conforming inputs in our test classes and verify
that our truths hold. This is slower and more abstract than
example-based unit tests, but we are far more likely to pick up edge
cases.

So I'm going to recopy the above code fragment, add the function
specs, and add some generative tests. At that point I think we've
added enough to then move this all into real code.

#+BEGIN_SRC clojure :results silent
  (require '[clojure.test :refer [deftest is testing]])
  (require '[clojure.spec.alpha :as s])
  (require '[clojure.spec.test.alpha :as st])

  (s/def :petal/type #{:petal/hidden :petal/visible})
  (s/def :petal/size (s/and int? #(>= % 0) #(<= % 100)))
  ;; spec generators don't like it when the first predicate doesn't
  ;; explicitly indicate a type, which is why just using pos? wasn't
  ;; enough.
  (s/def :petal/rate (s/and int? pos?))
  (s/def :petal/countdown (s/and int? #(>= % 0)))

  (defmulti petal-type :petal/type)
  (defmethod petal-type :petal/hidden [_]
    (s/keys :req [:petal/type :petal/countdown]))
  (defmethod petal-type :petal/visible [_]
    (s/keys :req [:petal/type :petal/size :petal/rate]))

  (s/def :petal/petal (s/multi-spec petal-type :petal/type))
  (s/def :petal/petal-hidden (s/and :petal/petal #(= (:petal/type %) :petal/hidden)))
  (s/def :petal/petal-visible (s/and :petal/petal #(= (:petal/type %) :petal/visible)))

  (def visible-petal-full
    {:petal/type :petal/visible :petal/size 100 :petal/rate 10})
  (def visible-petal-empty
    #:petal{:type :petal/visible :size 0 :rate 10})

  (def invisible-petal-pending
    #:petal{:type :petal/hidden :countdown 100})
  (def invisible-petal-triggers
    #:petal{:type :petal/hidden :countdown 0})

  ;; Because function arg-lists are positional people often used a
  ;; regex-like method for writing specs for them, which I won't get
  ;; into, spec resources I've previously linked to should explain them
  ;; clearly.
  (s/fdef advance-petal-visible
    :args (s/cat :petal :petal/petal-visible)
    :ret :petal/petal
    ;; This complex bit just verifies the return type based on the input
    ;; petal that was provided.  Right now it often feels like I'm just
    ;; reimplementing the solution but I can see how there's a bit of a
    ;; shift from solution to verification here.
    ;;
    ;; This also highlights why the designs of spec don't enable it by default.
    :fn #(if (zero? (get-in (:args %) [:petal :petal/size]))
          (= (:petal/type (:ret %)) :petal/hidden)
          (= (:petal/type (:ret %)) :petal/visible)))

  (s/fdef advance-petal-hidden
    :args (s/cat :petal :petal/petal-hidden)
    :ret :petal/petal
    :fn #(if (zero? (get-in (:args %) [:petal :petal/countdown]))
           (= (:petal/type (:ret %)) :petal/visible)
           (= (:petal/type (:ret %)) :petal/hidden)))

  ;; Notice how I defined my spec defs (via `fdef`) not against the
  ;; multimethod definitions but against two new functions. This seems
  ;; to be a limitation in how spec works, possibly because multimethods
  ;; are sort of kludgy things that appear to be more java object than
  ;; whatever clojure uses internally for runctions. This seems to cause
  ;; issues. It's basically the same split I had before, and the nice
  ;; thing is that my :fns are "simpler" by virtue of only handling what
  ;; each implementation requires vs handling them all, but it is kind
  ;; of annoying.
  (defmulti advance-petal
    "Progress the petal forward in time.

    If visible, shrink the petal by its shrinking rate. If invisible,
    tick the countdown timer by one.  If the relevant visible/hidden
    petals values reach a zero value or lower (size/countdown
    respectively) then flip them into the alternating state with
    randomized new starting conditions.

    Arguments:
    - petal to advance
    Return:
    - petal having moved forward in time, including flipping state."
    :petal/type)

  (defn advance-petal-hidden
    [{:keys [petal/countdown] :as petal}]
    (if (zero? countdown)
      #:petal{:type :petal/visible :size 100 :rate 10}
      (assoc petal :petal/countdown (dec countdown))))

  (defmethod advance-petal :petal/hidden
    [petal]
    (advance-petal-hidden petal))

  (defn advance-petal-visible
    [{:keys [petal/size petal/rate] :as petal}]
    (if (zero? size)
      #:petal{:type :petal/hidden :countdown 100}
      ; Note how I added a floor. This was because of an issue
      ; test.check caught, which we'll get to later.
      (assoc petal :petal/size (max 0 (- size rate)))))

  (defmethod advance-petal :petal/visible
    [petal]
    (advance-petal-visible petal))

  ;; This is how we enable arg checking (for dev and test mode)
  ;; Note we use the macro quote for some reason.
  (st/instrument `advance-petal-visible)
  (st/instrument `advance-petal-hidden)
  ;; These can be disabled with the following.
  (st/unstrument `advance-petal-visible)
  (st/unstrument `advance-petal-hidden)

  (deftest visible-petal-test
    (testing "Full petal shrinks"
      (let [shrunk-petal (advance-petal visible-petal-full)]
        (is (< (:petal/size shrunk-petal)
               (:petal/size visible-petal-full)))
        (is (= (+ (:petal/size shrunk-petal) (:petal/rate shrunk-petal))
               (:petal/size visible-petal-full)))))
    (testing "Empty petal flips"
      (let [flipped-petal (advance-petal visible-petal-empty)]
        (is (= (set (keys flipped-petal))
               (set (keys invisible-petal-pending)))))))

  (deftest invisible-petal-test
    (testing "Pending respawn counts down"
      (let [pending-respawn (advance-petal invisible-petal-pending)]
        (is (= (inc (:petal/countdown pending-respawn))
               (:petal/countdown invisible-petal-pending)))))
    (testing "Hidden petal respawns when countdown finished"
      (let [flipped-petal (advance-petal invisible-petal-triggers)]
        (is (= (set (keys flipped-petal))
               (set (keys visible-petal-full)))))))

  ;; Now let's throw about a thousand randomly generated petals at our
  ;; functions to make sure they always conform to our specs.
  (st/check `advance-petal-hidden)
  ;; Oh look at that throwing random visible petals indicates that my
  ;; spec doesn't allow for negative sizes but my advance-petal-visible
  ;; functional happily generates them. So I fixed it!
  (st/check `advance-petal-visible)
#+END_SRC

Alright yeah, if you read through the code you'll see I had to make
some changes both to make spec happy but also my testing _did_ find a
bug in my advance-petal code for visible petals. So hurrah! Value
proposition demonstrated!

Note: Every so often the `test/check` calls I make fail because the
generators for my petals can't generate valid input in 100
iterations. This seems weird given my code but I'll fix it later.  I
believe there are ways to guide the spec generators along to make
their lives easier, and it will be good to keep bashing those
test.check calls to see if I ever find a failing schema check under
larger numbers of random iterations.
*** Success!
OK! I think I've developed the flow I want out of this for now!

1. Model the necessary data and functions/logic I imagine I'll need,
   in hammock time (i.e. thinking really hard about the business
   domain)
2. Spec my data models to get a sense of their shape and feel
   comfortable randomly generating examples.
3. Use TDD to produce characterization tests to get a starting sense
   of what I want my behaviour to look like. Turn on instrumenting so
   at least I make sure my arguments are correct.
4. Write a function spec after using thinking time to figure out the invariants of my function.
5. Write up generators if needed and add some generative tests and
   make sure they pass over a large number of randomly generated
   inputs!
6. Turn off instrumenting if I don't think I'll be revisiting these functions/data again.
7. Copy work into project file structure.

It seems like to start doing the design here is a good idea, but
eventually I can see me accelerating this directly into code. I
suspect the switch will happen when I stop making distinct design
decisions, which at the beginning of a code project is all the dang
time! When I stop playing around with data specs I suspect I'll be in
a better place to make my journal notes less detailed..
** 2020-07-09
I tried this on the 28th but I got distracted.

I moved code out of the journal and into source files.

I also figured out how to write fixtures to instrument/unstrument functions as fixtures, as well as wrap spec checks in the clojure.test framework.
** 2022-12-26
*** Re-awakening
Life happened. I got a new cat. My job became involved. I got covid. I got heart failure. I recovered almost none the worse for wear. My job continued to be involved. The pandemic lightened into a kind of normal life again. I made a shrine for Cooper recently. I started therapy for, amongst other things, procrastination and the anxiety that it often manifests from. I wanted a creative project again.

Still catching up to where I left off. To start with, I understand [[https://nixos.org/nixpkgs][Nix]], my chosen development environment/packaging system, a little better now. So let's migrate to nix flakes, doesn't look like I was doing much here anyway.
*** Pivoting my approach
I've realized a couple things since the last time I touched this project:
1. It's important to have /some/ kind of end-to-end vision so you can constrain your designs. Bottom-up isn't enough if you don't understand the domain involved (and I am not a game developer, so I absolutely don't know what I'm doing here.)
2. Tests are an important feedback, but you should have feedback over your whole design too. It's great to have specs and tests as a contract for your code to conform to, but tests/specs aren't enough to ensure that the contract you specify actually aligns to your end-to-end vision. As a back-end developer I have to accept that designing the frontend needs to happen as early as the backend (or each code module), and more importantly that I can prototype/iterate on every layer of this game in a malleable way. I can sketch out a UI and not necessarily constrain/ossify how the code looks, especially if I lean on iteration and feedback through the whole cycle.


One of the reasons I remember not going further than I did before was because after I tests my idea of what a petal should look like in code, I didn't know where to go from there; I don't know how that piece fit into a whole game.

So let's take a different tactic. Let's sketch out what this looks like to me, the game-player first. I'm not necessarily mocking out a whole functioning UI, but let's maybe hook up something simple and stupid to visualize my game logic in a way that approximates how I expect people to engage with this game. I think that will also help me understand both the code I need to write but also how each piece will fit against each other.
*** Clojurescript is a better fit for this project
The JVM's UI isn't great, there's a reason nobody writes games in Java. Kotlin, sure, for mobile apps? But even those UI frameworks don't exist on the desktop for me to leverage. I'll probably have to accept that I'll need the browser for quick UI sketching wins, something I could ignore in the past when I was purposely ignoring UI considerations.

Luckily, most if not all of my code is likely platform-agnostic at this point. Let's validate this by trying to get what I have running in clojurescript instead of the clojure VM.

OK, well, my user.clj has a lot of non-portable stuff. OK. Let's start with a test-runner?
*** Spent a few hours trying to get tests to run in clojurescript. They fail silently but new tests from scratch work???
OK, ignoring these for now. Let's basically start again and maybe move things over in a re-do. Let's start with building a silly UI prototype.

(this was one of the reasons I remember trying to avoid javascript. The errors are worse than Clojure's)
*** Let's draw a crappy UI prototype
(nothing more than necessary. Let's draw a 4x7 petal grid in a browser.)

[[https://github.com/oakes/play-cljc][Play-cljc]] is the front-runner game engine but it's probably more than I currently want to deal with. I assume it handles enough user input/output that I won't want to write my own game-engine, but for now I can do what I want fairly easily in a stupid way. It would also mean I could decide between Clojure and Clojurescript to see what runtime experience I prefer since cljc implies both JVM and browser runtimes are supported.

I'm enticed by just using React/[[https://github.com/reagent-project/reagent][Reagent]] for games as well. For my purposes it shouldn't be that hard, I'm not dealing with a lot of movement and sprites interacting with each other.

For now though, I'll just use a crappy canvas. Proof of concept. Nothing dynamic to start.







